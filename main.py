'''
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã Telegram-–±–æ—Ç–∞
–∏ –µ–≥–æ –≤–∑–∞–∏–º–æ–º–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
'''
from random import shuffle, choice
from datetime import datetime

from telebot import types, TeleBot
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

from models import Word, Study, User, DBaseConfig
from config import TGBOT_TOKEN

BACKEND_INFO = {}

class DBase:
    '''–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL.

       –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö, –∏—Ö —á–∞—Å—Ç—è—Ö —Ä–µ—á–∏, –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π,
       –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
       –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Ñ–∞–π–ª .config –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
       
    '''

    @staticmethod
    def _pulling_info(word, chat_id):
        '''–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–ª–æ–≤–∞ (id_word) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "word" –∏
           –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id_user) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "user".

        '''
        word_id = (
            session.query(Word).filter(Word.title == word).first().id_word
            if BACKEND_INFO[chat_id] == 'en-ru' else
            session.query(Word).filter(Word.translation == word).first().id_word
            )
        user_id = session.query(User).filter(User.id_chat == chat_id).first().id_user
        return word_id, user_id

    @staticmethod
    def pulling_out_user_words(chat_id):
        '''–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "study".
        
        '''
        user_id = session.query(User).filter(User.id_chat == chat_id).first().id_user
        return session.query(Study).with_entities(Word.title, Word.translation)\
                        .join(Word.study).filter(Study.id_user == user_id).all()

    @staticmethod
    def filling_backend_info_words():
        '''–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å BACKEND_INFO –∏–º–µ—é—â–µ–π—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
           –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≥—Ä—É–ø–ø —Å–ª–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∫ —Ä–∞–∑–Ω—ã–º —á–∞—Å—Ç—è–º 
           —Ä–µ—á–∏: {'types': [id_type_1, id_type_2...]}.

        '''
        total = session.query(Word).with_entities(Word.id_type).group_by(Word.id_type).all()
        return [i[0] for i in total]

    @staticmethod
    def filling_backend_info_users():
        '''–§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è BACKEND_INFO –∏–º–µ—é—â–µ–π—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
           –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å Telegram-–±–æ—Ç–æ–º.
           BACKEND_INFO —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä—å {id —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–µ–∫ ('ru-en'/'en-ru')}.
        
        '''
        return dict(session.query(User.id_chat, User.type_cards).all())

    @staticmethod
    def add_new_user(chat_id):
        '''–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É "user".
           
        '''
        model = User(id_chat=chat_id, type_cards='en-ru')
        session.add(model)
        session.commit()
        BACKEND_INFO.update({chat_id: 'en-ru'})

    @staticmethod
    def change_language(chat_id):
        '''–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
           –í–Ω–æ—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É "user" –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç 
           –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å BACKEND_INFO.
        '''
        options = {'en-ru':'ru-en', 'ru-en': 'en-ru'}
        session.query(User).filter(User.id_chat == chat_id)\
               .update({'type_cards': options[BACKEND_INFO[chat_id]]})
        session.commit()
        BACKEND_INFO[chat_id] = options[BACKEND_INFO[chat_id]]

    @staticmethod
    def pulling_out_words_for_cards(chat_id):
        '''–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∫–∏ —á–µ—Ç—ã—Ä–µ—Ö —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
           –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫ –æ–¥–Ω–æ–º—É, —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É, —Ç–∏–ø—É —Ä–µ—á–∏.

        '''
        words = session.query(Word)\
                        .with_entities(Word.title, Word.translation)\
                        .filter(Word.id_type == choice(BACKEND_INFO['types'])).all()
        words = [choice(words) for _ in range(4)]
        return (
            (words[i] if not i else words[i][1] for i in range(4))
            if BACKEND_INFO[chat_id] == 'en-ru' else
            (words[i] if not i else words[i][0] for i in range(4))
            )

    @staticmethod
    def add_word(target_word, chat_id):
        '''–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ —Ç–∞–±–ª–∏—Ü—É "study". 
        
        '''
        word_id, user_id = DBase._pulling_info(target_word, chat_id)
        model = Study(id_word=word_id, id_user=user_id, date=datetime.now().date())
        session.add(model)
        session.commit()

    @staticmethod
    def del_word(target_word, chat_id):
        '''–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "study".
        
        '''
        word_id, user_id = DBase._pulling_info(target_word, chat_id)
        session.query(Study).filter(Study.id_word == word_id)\
                            .filter(Study.id_user == user_id).delete()
        session.commit()

    @staticmethod
    def is_in_study(target_word, chat_id):
        '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
           –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –¥–∞–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ '–£–¥–∞–ª–∏—Ç—å üóë'.
           True - –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ (–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "study"),
           False - –æ—Ç—Å—É—Å—Ç–≤–∏–µ.
        '''
        word_id, user_id = DBase._pulling_info(target_word, chat_id)
        try:
            session.query(Study).filter(Study.id_user == user_id)\
                   .filter(Study.id_word == word_id).first().id_study
            return True
        except AttributeError:
            return False


class RegisterStates(StatesGroup):
    '''–ö–ª–∞—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π Telegram-–±–æ—Ç–∞, –¥–ª—è –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 
       –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö.

    '''
    target_word = State()
    target_word_transl = State()
    avail_options = State()
    target_word_message= State()


class Extentions:
    '''–ö–ª–∞—Å—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ Telegram-–±–æ—Ç—É, –≤ —Ç–æ–º
       —á–∏—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

    '''
    add_word = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å \U00002795')
    del_word = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å \U0001F5D1')
    next_word = types.KeyboardButton('–°–ª–µ–¥—É—é—â–µ–µ \U000023E9')
    ru_en_change = types.KeyboardButton('\U0001F1F7\U0001F1FA –°–º–µ–Ω–∏—Ç—å \U0001F1EC\U0001F1E7')
    en_ru_change = types.KeyboardButton('\U0001F1EC\U0001F1E7 –°–º–µ–Ω–∏—Ç—å \U0001F1F7\U0001F1FA')
    show_users_list = types.KeyboardButton('–í–∞—à–∏ —Å–ª–æ–≤–∞ \U0001F9E0')

    @staticmethod
    def random_phrase_win():
        '''–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ—Ä–∞–∑—É
           –≤ —Å–ª—É—á–∞–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        '''
        answer_options = (
            '–î–∞, –í—ã –ø—Ä–∞–≤—ã \U0001F44D', '–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å \U0001F44F',
            '–¢–æ—á–Ω–æ! \U0001F4AA', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ \U0001F973', '–í —Ç–æ—á–∫—É \U0001F4AF',
            '–í–µ—Ä–Ω–æ \U00002705'
        )
        return choice(answer_options)

    @staticmethod
    def random_phrase_lose():
        '''–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é —Ñ—Ä–∞–∑—É
           –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        '''
        answer_options = (
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç \U0001F648', '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π \U0000274C',
            '–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ \U0001F9DE', '–ü–æ—á—Ç–∏ —É–≥–∞–¥–∞–ª–∏ \U0001F40C',
            '–¢—É—Ç –¥–∞–∂–µ —è –±—ã –æ—à–∏–±—Å—è \U0001F937', '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å \U0001F9A5'
        )
        return choice(answer_options)


class Telebot:
    '''–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram-–±–æ—Ç–∞

       –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Ñ–∞–π–ª .config –≤–≤–µ—Å—Ç–∏ –∏–º–µ—é—â–∏–π—Å—è —Ç–æ–∫–µ–Ω
    
    '''
    bot = TeleBot(TGBOT_TOKEN, state_storage=StateMemoryStorage())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == Extentions.next_word.text)
    def next_word(message):
        '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–≥–æ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        –∫–∞–∫–∏—Ö-–ª–∏–±–æ –æ–ø–µ—Ä–∞—Ü–∏–π.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '–°–ª–µ–¥—É—é—â–µ–µ ‚è©'.

        '''
        Telebot.create_cards(message)

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == Extentions.del_word.text)
    def del_word(message):
        '''–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
           –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '–£–¥–∞–ª–∏—Ç—å üóë'.
        
        '''
        with Telebot.bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            target_word = data['target_word']
            DBase.del_word(target_word, message.chat.id)
            Telebot.bot.send_message(message.chat.id,
                                     f'–°–ª–æ–≤–æ {target_word.upper()} —É–¥–∞–ª–µ–Ω–æ –∏–∑ '
                                     '–í–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞! \U0001F4A9')
        Telebot.create_cards(message)

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == Extentions.add_word.text)
    def add_word(message):
        '''–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
           –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '–î–æ–±–∞–≤–∏—Ç—å ‚ûï'
        
        '''
        try:
            with Telebot.bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                target_word = data['target_word']
                target_word_transl = data['target_word_transl']
        except KeyError:
            Telebot.bot.send_message(message.chat.id,
                                     '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —Å–ø–ª—é –Ω–∞ —Ö–æ–¥—É \U0001F634')
            Telebot.create_cards(message)
            return

        DBase.add_word(target_word, message.chat.id)

        Telebot.bot.send_message(message.chat.id,
                                 '–ó–∞–ø–æ–º–Ω–∏—Ç–µ, –∞ —Ç–æ –∑–∞–±—É–¥–µ—Ç–µ!\U0001F9D0\n')
        if BACKEND_INFO[message.chat.id] == 'en-ru':
            reply_message = (f'\U0001F1EC\U0001F1E7 {target_word.upper()} '
                             f'\U00002194 {target_word_transl} \U0001F1F7\U0001F1FA')
        else:
            reply_message = (f'\U0001F1F7\U0001F1FA {target_word.upper()} '
                             f'\U00002194 {target_word_transl} \U0001F1EC\U0001F1E7 ')
        Telebot.bot.send_message(message.chat.id, reply_message)
        Telebot.bot.send_message(message.chat.id,
                                 '–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫, '
                                 '—è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç \U000023F0 –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å')
        Telebot.create_cards(message)

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == Extentions.show_users_list.text)
    def show_users_word(message):
        '''–§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤, –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è 
           –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        '''
        words = DBase.pulling_out_user_words(message.chat.id)
        if words:
            Telebot.bot.send_message(message.chat.id,
                                     '–ò–∑—É—á–∞–µ–º—ã–µ –í–∞–º–∏ —Å–ª–æ–≤–∞: \U0001F4D6')
            user_words_message = '`'
            for pair in words:
                row = f'{pair[0].upper():>10} \U0001F501 {pair[1]:<10}\n'
                user_words_message += row
            Telebot.bot.send_message(message.chat.id,
                                     user_words_message + '`',
                                     parse_mode='Markdown')
        else:
            Telebot.bot.send_message(message.chat.id,
                                     '–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç \U0001F573')

    @staticmethod
    @bot.message_handler(func=lambda message: message.text
                         in (Extentions.ru_en_change.text, Extentions.en_ru_change.text))
    def change_language(message):
        '''–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        '''
        DBase.change_language(message.chat.id)
        Telebot.create_cards(message)

    @staticmethod
    @bot.message_handler(commands=['start'])
    def greeting(message):
        '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
           –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start

        '''
        if message.chat.id not in BACKEND_INFO:
            DBase.add_new_user(message.chat.id)
        greeting_message = (
            '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! \U0001F44B\n'
            '–Ø - –±–æ—Ç \U0001F916, –æ–±—É—á–∞—é—â–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –ª–µ–∫—Å–∏–∫–æ–Ω—É \U0001F468\U0000200D\U0001F393\n'
            )
        faq_message = (
            '–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ \U0001F4AC –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –≤–≤–µ–¥–∏—Ç–µ /help\n'
            '–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è \U0001F4DA\n–≤–≤–µ–¥–∏—Ç–µ /cards\n'
            '–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ \U0001F447'
            )

        url = 'https://github.com/avsav1n/SQLTGBot_cw'
        markup_inl = types.InlineKeyboardMarkup()
        markup_inl.add(types.InlineKeyboardButton('–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ GitHub \U0001F40D', url=url))

        Telebot.bot.send_message(message.chat.id, greeting_message, reply_markup=markup_inl)

        markup_repl = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup_repl.add(types.KeyboardButton('/cards'))
        markup_repl.add(types.KeyboardButton('/help'))

        Telebot.bot.send_message(message.chat.id, faq_message, reply_markup=markup_repl)

    @staticmethod
    @bot.message_handler(commands=['help'])
    def help(message):
        '''–§—É–Ω–∫—Ü–∏—è, –ø–æ–¥—Ä–æ–±–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∞—è –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
           –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
           –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /help

        '''
        help_message = (
            '–ö–∞–∫ —É–∂–µ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ —Ä–∞–Ω–µ–µ, —è - –±–æ—Ç \U0001F916, –æ–±—É—á–∞—é—â–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –ª–µ–∫—Å–∏–∫–æ–Ω—É.\n'
            '–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ—Å—Ç–∞ - —è –ø—Ä–µ–¥–ª–∞–≥–∞—é \U0001F1EC\U0001F1E7 —Å–ª–æ–≤–æ, –í–∞—à–∞ '
            '–∑–∞–¥–∞—á–∞ –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ \U0001F1F7\U0001F1FA –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.'
            '\n–¢–∞–∫–∂–µ, –∑–∞ –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑—É—á–∞–µ–º—ã—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ª–æ–≤.\n'
            '–ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è –í—ã –Ω–∞—Ç–∫–Ω–µ—Ç–µ—Å—å –Ω–∞ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–µ —Å–ª–æ–≤–æ \U0001F92F, –í—ã –º–æ–∂–µ—Ç–µ '
            '–¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –í–∞–º –±—É–¥—É—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '
            '–¥–ª—è –∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å, 7, 16 –∏ 35.\n'
            '–ü—Ä–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–º –∂–µ–ª–∞–Ω–∏–∏ —è —Ç–∞–∫–∂–µ –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ '
            '–∏–∑—É—á–∞–µ–º—ã—Ö –í–∞–º–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ª–æ–≤, –¥–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ \n–∫–æ–º–∞–Ω–¥—É /show\n'
            '–î–∞–≤–∞–π—Ç–µ —É–∂–µ –Ω–∞—á–Ω–µ–º! \U0001F609'
            )
        markup_repl = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup_repl.add('/cards')

        Telebot.bot.send_message(message.chat.id, help_message, reply_markup=markup_repl)

    @staticmethod
    @bot.message_handler(commands=['cards'])
    def create_cards(message):
        '''–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
           –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
           –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /cards

        '''
        target_word, *words_transl = DBase.pulling_out_words_for_cards(message.chat.id)
        match BACKEND_INFO[message.chat.id]:
            case 'en-ru':
                target_word, target_word_transl = target_word
                start_cards_message = f'\U0001F1EC\U0001F1E7 {target_word.upper()}'
            case 'ru-en':
                target_word_transl, target_word = target_word
                start_cards_message = f'\U0001F1F7\U0001F1FA {target_word.upper()}'

        words_transl.append(target_word_transl)
        shuffle(words_transl)
        words_buttons = (types.KeyboardButton(word) for word in words_transl)
        markup_repl = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup_repl.add(*words_buttons)

        markup_repl.add(Extentions.next_word)
        if DBase.is_in_study(target_word, message.chat.id):
            markup_repl.add(Extentions.del_word)
        else:
            markup_repl.add(Extentions.add_word)

        if BACKEND_INFO[message.chat.id] == 'en-ru':
            markup_repl.row(Extentions.show_users_list, Extentions.en_ru_change)
        else:
            markup_repl.row(Extentions.show_users_list, Extentions.ru_en_change)

        Telebot.bot.set_state(message.from_user.id,
                              RegisterStates.target_word_transl, message.chat.id)
        with Telebot.bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['target_word_transl'] = target_word_transl
            data['target_word'] = target_word
            data['avail_options'] = words_transl
            data['target_word_message'] = start_cards_message

        Telebot.bot.send_message(message.chat.id, start_cards_message, reply_markup=markup_repl)

    @staticmethod
    @bot.message_handler(content_types=['text'])
    def check_response(message):
        '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤ —Ñ—É–Ω–∫—Ü–∏–∏
           create_cards –∫–∞—Ä—Ç–æ—á–∫—É
           –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É
           (—á—Ç–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ, –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∞–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
        
        '''
        user_word = message.text
        try:
            with Telebot.bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                target_word_transl = data['target_word_transl']
                avail_options = data['avail_options']
                start_cards_message = data['target_word_message']
        except KeyError:
            Telebot.bot.send_message(message.chat.id,
                                     '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —É—Å–Ω—É–ª \U0001F4A4 , –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...')
            Telebot.create_cards(message)
            return
        if user_word in avail_options:
            if target_word_transl == user_word:
                Telebot.bot.send_message(message.chat.id,
                                        Extentions.random_phrase_win())
                Telebot.create_cards(message)
            else:
                Telebot.bot.send_message(message.chat.id,
                                        Extentions.random_phrase_lose())
                Telebot.bot.send_message(message.chat.id, start_cards_message)
        else:
            Telebot.bot.send_message(message.chat.id,
                                     '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö '
                                     '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ \U0001F9CF')
            Telebot.bot.send_message(message.chat.id, start_cards_message)


if __name__ == '__main__':
    print('Bot is running...')
    session = DBaseConfig.Session()
    BACKEND_INFO = DBase.filling_backend_info_users()
    BACKEND_INFO['types'] = DBase.filling_backend_info_words()
    try:
        Telebot.bot.polling(interval=1)
    finally:
        print('Bot stopped.')
        session.close()
        print('Session close.')
